<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
		PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
		"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>ThreeJsApi</title>

	<script type="text/javascript" src="jQuery/jquery-1.10.2.min.js"></script>
	<script type="text/javascript" src="ThreeJs/build/three.js"></script>
<!--
	<script type="text/javascript" src="ThreeJs/examples/js/shaders/CopyShader.js"></script>
	<script type="text/javascript" src="ThreeJs/examples/js/shaders/DotScreenShader.js"></script>
	<script type="text/javascript" src="ThreeJs/examples/js/shaders/RGBShiftShader.js"></script>
	<script type="text/javascript" src="ThreeJs/examples/js/postprocessing/EffectComposer.js"></script>
	<script type="text/javascript" src="ThreeJs/examples/js/postprocessing/RenderPass.js"></script>
	<script type="text/javascript" src="ThreeJs/examples/js/postprocessing/MaskPass.js"></script>
	<script type="text/javascript" src="ThreeJs/examples/js/postprocessing/ShaderPass.js"></script>
//-->
	<script type="text/javascript" src="Api/ThreeJsApi.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Renderer.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Renderer/WebGL.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Renderer/Canvas.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Renderer/Svg.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Camera.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Camera/Perspective.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Scene.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Scene/Fog.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Geometry.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Geometry/Cube.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Geometry/Torus.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Material.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Material/Mesh.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Material/Mesh/Basic.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Material/Mesh/Lambert.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Material/Mesh/Phong.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Texture.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Mesh.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Mesh/Basic.js"></script>
	<script type="text/javascript" src="Api/ThreeJsApi/Mesh/MultiMaterial.js"></script>

	<script type="text/javascript" src="Api/ThreeJsApi/Animation.js"></script>
</head>
<body>

<div id="Canvas"></div>
<div id="WebGL"></div>

<script type="text/javascript">

var Test = (function() {


	var Workbench = function( Display ) {

		var Texture = ThreeJsApi.Create().Texture().setFile('MB-Logo-2013.gif');


		Display.getScene().addObject(
			ThreeJsApi.Create().Mesh().MultiMaterial()
				.setGeometry( ThreeJsApi.Create().Geometry().Cube().setWidth(200).setHeight(70).setDepth(200) )
				.addMaterial( ThreeJsApi.Create().Material().Mesh().Basic().setColor( '#000000' ) )
				.addMaterial( ThreeJsApi.Create().Material().Mesh().Lambert().setTexture( Texture).setTransparent( true ) )
		);

/*
		Display.getScene().addObject( ThreeJsApi.Create()
			.Mesh().Basic()
//			.setGeometry( ThreeJsApi.Create().Geometry().Torus().setRadius(100).setTube(40) )
			.setGeometry( ThreeJsApi.Create().Geometry().Cube().setWidth(200).setHeight(200).setDepth(200) )
//			.setMaterial( ThreeJsApi.Create().Material().Mesh().Lambert().setWireFrame(false).setTexture( Texture ) )
			.setMaterial( ThreeJsApi.Create().Material().Mesh().Phong().setTexture( Texture ) )
//			.setMaterial( ThreeJsApi.Create().Material().Mesh().Basic().setWireFrame(false) )
		);
*/
		/*
		Display.getScene().getTJSObject().add(
			new THREE.SceneUtils.createMultiMaterialObject(
					new THREE.CubeGeometry( ),
				[
					new THREE.MeshPhongMaterial( {
										ambient: 0xFFFFFF, color: 0xFFFFFF, specular: 0x3333333, shininess: 30,
										shading: THREE.SmoothShading, map: new THREE.ImageUtils.loadTexture( 'MB-Logo-2013.gif' ),
										transparent: false, wireframe: false
									}),new THREE.MeshPhongMaterial( {
										ambient: 0xFFFFFF, color: 0xFFFFFF, specular: 0x3333333, shininess: 30,
										shading: THREE.SmoothShading, map: new THREE.ImageUtils.loadTexture( 'MB-Logo-2013.gif' ),
										transparent: true, wireframe: false
									})
				]
			)
		);
*/
		Display.getScene().setFog(
			ThreeJsApi.Create().Scene().Fog().setNear(100).setFar(1000)
		);

		$AL = new THREE.AmbientLight(0x222222, 1.0);
		Display.getScene().getTJSObject().add( $AL );

		$DL = new THREE.DirectionalLight(0xFFFFFF, 1.0);
		$DL.position = Display.getCamera().getTJSObject().position;
		Display.getScene().getTJSObject().add( $DL );

		Display.getAnimation().setLoop( function() {
			Display.getScene().getObject(0).getTJSObject().rotation.y += 0.01;
		});
		Display.runAnimation();
	};

	var Handler = [
		'div#WebGL',
		'div#Canvas'
	];
	for( var Index in Handler ) {
		if( Handler.hasOwnProperty( Index ) ) {
			var Display;
			var Renderer;
			switch( Index ) {
				case '0': {
					Display = ThreeJsApi.Load( Handler[Index] );
					Renderer = ThreeJsApi.Create().Renderer().WebGL();
					break;
				}
				case '1': {
					Display = ThreeJsApi.Load( Handler[Index] );
					Renderer = ThreeJsApi.Create().Renderer().Canvas();
					break;
				}
				case '2': {
					Display = ThreeJsApi.Load( Handler[Index] );
					Renderer = ThreeJsApi.Create().Renderer().Svg();
					break;
				}
			}
			Display.setRenderer( Renderer.setWidth(640).setHeight(480).setBackgroundColor('#CCC') );
			Display.setCamera( ThreeJsApi.Create().Camera()
				.Perspective()
				.setAspect( Display.getRenderer().getWidth() / Display.getRenderer().getHeight() )
				.setPositionZ(500)
			);
			Workbench( Display );
		}
	}
})();



	/*


		Display.getPostFx().addPass( new THREE.RenderPass( Display.getScene().getTJSObject(), Display.getCamera().getTJSObject() ) );

		var dotScreenEffect = new THREE.ShaderPass( THREE.DotScreenShader );
		dotScreenEffect.uniforms[ 'scale' ].value = 4;
		Display.getPostFx().addPass( dotScreenEffect );

		var rgbEffect = new THREE.ShaderPass( THREE.RGBShiftShader );
		rgbEffect.uniforms[ 'amount' ].value = 0.0015;
		rgbEffect.renderToScreen = true;
		Display.getPostFx().addPass( rgbEffect );

	*/


</script>


</body>
</html>
